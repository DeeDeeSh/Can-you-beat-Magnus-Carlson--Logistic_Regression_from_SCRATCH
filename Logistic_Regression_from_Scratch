{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12284004,"sourceType":"datasetVersion","datasetId":7741590}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# *Logistic Regression without .fit() from scratch*\n*Today, I completed what was due i.e* **building a  binary classification algorithm Logistic Regression model from bare python** *and getting it off my checklist.* **This model decides between two descrete values from multiple number of features ( in my case 3 )**. *This model is a boon in many industries e.g healthcare where it used to detect various small or fatal diseases.*\n\n*In this notebook, I built a model* **that predicts how well you fare against currently highest rated chess player Magnus Carlson**. *For training examples, a real dataset was hard to find so I created a synthetic dataset with ChatGPT to simulate chess player performances.*\n\n*Below is the code from scratch with explanation for each cell.*","metadata":{}},{"cell_type":"markdown","source":"* *Importing common libraries firstly*\n* *I imported scikit-learn for basic visual representation which will see later down the notebook*","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport math as m\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-26T08:39:51.717010Z","iopub.execute_input":"2025-06-26T08:39:51.717335Z","iopub.status.idle":"2025-06-26T08:39:51.722527Z","shell.execute_reply.started":"2025-06-26T08:39:51.717311Z","shell.execute_reply":"2025-06-26T08:39:51.721433Z"}},"outputs":[],"execution_count":94},{"cell_type":"markdown","source":"* *Loadng the dataset from input with help of pandas*","metadata":{}},{"cell_type":"code","source":"df=pd.read_csv(\"/kaggle/input/beat-magnus/magnus_prediction_dataset_balanced.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.295149Z","iopub.execute_input":"2025-06-26T07:54:05.295471Z","iopub.status.idle":"2025-06-26T07:54:05.323482Z","shell.execute_reply.started":"2025-06-26T07:54:05.295434Z","shell.execute_reply":"2025-06-26T07:54:05.322595Z"}},"outputs":[],"execution_count":68},{"cell_type":"markdown","source":"* *Here is typical view of dataset.*\n* *Here I took Column name \" Chance to Beat Magnus? \" for the required probability to be called his level as one will always have chances whether Yes or No.*","metadata":{}},{"cell_type":"code","source":"df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.324932Z","iopub.execute_input":"2025-06-26T07:54:05.325217Z","iopub.status.idle":"2025-06-26T07:54:05.335968Z","shell.execute_reply.started":"2025-06-26T07:54:05.325196Z","shell.execute_reply":"2025-06-26T07:54:05.335166Z"}},"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"     No. of GMs Beaten  Elo Rating  Avg Opponent Rating (Last 50 Games)  \\\n0                  152        2647                                 2547   \n1                  485        2698                                 2588   \n2                  320        2807                                 2736   \n3                  156        2627                                 2771   \n4                  121        2538                                 2688   \n..                 ...         ...                                  ...   \n195                398        2738                                 2643   \n196                452        2789                                 2511   \n197                395        2595                                 2723   \n198                560        2625                                 2771   \n199                196        2617                                 2655   \n\n    Chance to Beat Magnus?  \n0                       No  \n1                       No  \n2                       No  \n3                       No  \n4                       No  \n..                     ...  \n195                     No  \n196                     No  \n197                     No  \n198                    Yes  \n199                     No  \n\n[200 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>No. of GMs Beaten</th>\n      <th>Elo Rating</th>\n      <th>Avg Opponent Rating (Last 50 Games)</th>\n      <th>Chance to Beat Magnus?</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>152</td>\n      <td>2647</td>\n      <td>2547</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>485</td>\n      <td>2698</td>\n      <td>2588</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>320</td>\n      <td>2807</td>\n      <td>2736</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>156</td>\n      <td>2627</td>\n      <td>2771</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>121</td>\n      <td>2538</td>\n      <td>2688</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>398</td>\n      <td>2738</td>\n      <td>2643</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>196</th>\n      <td>452</td>\n      <td>2789</td>\n      <td>2511</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>395</td>\n      <td>2595</td>\n      <td>2723</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>198</th>\n      <td>560</td>\n      <td>2625</td>\n      <td>2771</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>196</td>\n      <td>2617</td>\n      <td>2655</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n<p>200 rows Ã— 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":69},{"cell_type":"markdown","source":"* *We replace Yes/No with 0/1 to get probability with respect to 'Yes'. E.g 1 = 100 % Chance of getting 'Yes'.*\n* *Replace method is used in this case.*","metadata":{}},{"cell_type":"code","source":"df[\"Chance to Beat Magnus?\"] = df[\"Chance to Beat Magnus?\"].replace({\"Yes\": 1, \"No\": 0})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:56:25.386300Z","iopub.execute_input":"2025-06-26T07:56:25.386597Z","iopub.status.idle":"2025-06-26T07:56:25.400745Z","shell.execute_reply.started":"2025-06-26T07:56:25.386571Z","shell.execute_reply":"2025-06-26T07:56:25.399830Z"}},"outputs":[],"execution_count":85},{"cell_type":"markdown","source":"* *Below we normalize our features. Why? to keep each feature's weight balanced so some of them won't influence the outcome not more than they should.*\n* *For this, Z-score normalization is taken because it makes mean 1 and std_deviation to be 0 so centering our data and speeding the training especially for gradient models.*","metadata":{}},{"cell_type":"code","source":"mean_B = df['Elo Rating'].mean()\nstd_B = df['Elo Rating'].std()\ndf['Elo_Norm'] = (df['Elo Rating'] - mean_B) / std_B","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.358276Z","iopub.execute_input":"2025-06-26T07:54:05.359316Z","iopub.status.idle":"2025-06-26T07:54:05.374755Z","shell.execute_reply.started":"2025-06-26T07:54:05.359290Z","shell.execute_reply":"2025-06-26T07:54:05.373778Z"}},"outputs":[],"execution_count":71},{"cell_type":"code","source":"mean_C = df['No. of GMs Beaten'].mean()\nstd_C = df['No. of GMs Beaten'].std()\ndf['No. of GMs Beaten'] = (df['No. of GMs Beaten'] - mean_C) / std_C","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.375584Z","iopub.execute_input":"2025-06-26T07:54:05.375831Z","iopub.status.idle":"2025-06-26T07:54:05.394068Z","shell.execute_reply.started":"2025-06-26T07:54:05.375812Z","shell.execute_reply":"2025-06-26T07:54:05.392947Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"mean_D = df['Avg Opponent Rating (Last 50 Games)'].mean()\nstd_D = df['Avg Opponent Rating (Last 50 Games)'].std()\ndf['Avg Opponent Rating (Last 50 Games)_Norm'] = (df['Avg Opponent Rating (Last 50 Games)'] - mean_D) / std_D","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.395062Z","iopub.execute_input":"2025-06-26T07:54:05.395343Z","iopub.status.idle":"2025-06-26T07:54:05.414192Z","shell.execute_reply.started":"2025-06-26T07:54:05.395323Z","shell.execute_reply":"2025-06-26T07:54:05.413062Z"}},"outputs":[],"execution_count":73},{"cell_type":"markdown","source":"* *This is cost function. It gives the error our model will have compared to actual values.*\n* *In logistic regression, Cost function differs from linear regression as this contains logirithmic terms for different values of y i.e for y=0 and y=1.*\n* *So why even call it regression? because of underlying z variable which goes inside sigmoid function for prediction. z is decision boundary that divides the two descrete outcomes when they are plotted with respective features.*","metadata":{}},{"cell_type":"code","source":"# Cost function\ndef cost_func(w1, w2, w3, b):\n    cf = 0\n    for i in range(200):\n        z = w1 * df.loc[i, \"No. of GMs Beaten\"] + w2 * df.loc[i, \"Elo_Norm\"] + w3 * df.loc[i, \"Avg Opponent Rating (Last 50 Games)_Norm\"] + b\n        sg_z = 1 / (1 + m.exp(-z))\n        sg_z = max(min(sg_z, 1 - 1e-15), 1e-15)  # avoid log(0)\n        y = df.loc[i, \"Chance to Beat Magnus?\"]\n        cfb = -1 * (y * m.log(sg_z) + (1 - y) * m.log(1 - sg_z))\n        cf += cfb\n    print(\"Cost:\", (1 / 200) * cf)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.462215Z","iopub.execute_input":"2025-06-26T07:54:05.462468Z","iopub.status.idle":"2025-06-26T07:54:05.477668Z","shell.execute_reply.started":"2025-06-26T07:54:05.462442Z","shell.execute_reply":"2025-06-26T07:54:05.476668Z"}},"outputs":[],"execution_count":76},{"cell_type":"markdown","source":"* *Gradient descent. It is used to navigate to fitting values for each weight in our model.*\n* *Yes, it looks very similar to linear regression but here sigmoid function i.e probability is used.*","metadata":{}},{"cell_type":"code","source":"# Gradient descent\ndef grad_desc(w1, w2, w3, b, rol):\n    der_w1 = der_w2 = der_w3 = der_b = 0\n    for i in range(200):\n        z = w1 * df.loc[i, \"No. of GMs Beaten\"] + w2 * df.loc[i, \"Elo_Norm\"] + w3 * df.loc[i, \"Avg Opponent Rating (Last 50 Games)_Norm\"] + b\n        sg_z = 1 / (1 + m.exp(-z))\n        y = df.loc[i, \"Chance to Beat Magnus?\"]\n        dz = sg_z - y\n\n        der_w1 += dz * df.loc[i, \"No. of GMs Beaten\"]\n        der_w2 += dz * df.loc[i, \"Elo_Norm\"]\n        der_w3 += dz * df.loc[i, \"Avg Opponent Rating (Last 50 Games)_Norm\"]\n        der_b  += dz\n\n    nw1 = w1 - rol * (der_w1 / 200)\n    nw2 = w2 - rol * (der_w2 / 200)\n    nw3 = w3 - rol * (der_w3 / 200)\n    nb  = b  - rol * (der_b / 200)\n    return [nw1, nw2, nw3, nb]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.494288Z","iopub.execute_input":"2025-06-26T07:54:05.494642Z","iopub.status.idle":"2025-06-26T07:54:05.504856Z","shell.execute_reply.started":"2025-06-26T07:54:05.494614Z","shell.execute_reply":"2025-06-26T07:54:05.503912Z"}},"outputs":[],"execution_count":77},{"cell_type":"markdown","source":"* *Now comes training. For each epoch, the values of w1,w2,w3,b are updated and for every 100th updated value cost function is calculated.*\n* *I have done this for few times to get a decent working model*\n* *Note:- Overfitting should be avoided as model will also learn noises that is not ideal.*","metadata":{}},{"cell_type":"code","source":"# epochs\nl = [0, 0, 0, 0]  # w1, w2, w3, b\nfor epoch in range(1000):\n    l = grad_desc(l[0], l[1], l[2], l[3], 0.1)\n    if epoch % 100 == 0:\n        cost_func(l[0], l[1], l[2], l[3])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:05.506586Z","iopub.execute_input":"2025-06-26T07:54:05.506875Z","iopub.status.idle":"2025-06-26T07:54:16.433422Z","shell.execute_reply.started":"2025-06-26T07:54:05.506852Z","shell.execute_reply":"2025-06-26T07:54:16.432487Z"}},"outputs":[{"name":"stdout","text":"Cost: 0.6770736521781946\nCost: 0.2944939266588488\nCost: 0.24494699880291124\nCost: 0.2236321434093394\nCost: 0.21135317051719052\nCost: 0.2032515691997719\nCost: 0.19746592393973672\nCost: 0.1931140461338527\nCost: 0.18971831049365212\nCost: 0.18699528189517797\n","output_type":"stream"}],"execution_count":78},{"cell_type":"code","source":"for epoch in range(1000):\n    l = grad_desc(l[0], l[1], l[2], l[3], 0.1)\n    if epoch % 100 == 0:\n        cost_func(l[0], l[1], l[2], l[3])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:16.434309Z","iopub.execute_input":"2025-06-26T07:54:16.434546Z","iopub.status.idle":"2025-06-26T07:54:27.216147Z","shell.execute_reply.started":"2025-06-26T07:54:16.434526Z","shell.execute_reply":"2025-06-26T07:54:27.215191Z"}},"outputs":[{"name":"stdout","text":"Cost: 0.18476506810898216\nCost: 0.18290746851619422\nCost: 0.1813388358853076\nCost: 0.1799990113640083\nCost: 0.17884353452634102\nCost: 0.17783878608371326\nCost: 0.1769588436117888\nCost: 0.1761833803419384\nCost: 0.1754962220088716\nCost: 0.17488433177081977\n","output_type":"stream"}],"execution_count":79},{"cell_type":"code","source":"for epoch in range(1000):\n    l = grad_desc(l[0], l[1], l[2], l[3], 0.1)\n    if epoch % 100 == 0:\n        cost_func(l[0], l[1], l[2], l[3])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:27.216969Z","iopub.execute_input":"2025-06-26T07:54:27.217208Z","iopub.status.idle":"2025-06-26T07:54:38.047555Z","shell.execute_reply.started":"2025-06-26T07:54:27.217189Z","shell.execute_reply":"2025-06-26T07:54:38.046890Z"}},"outputs":[{"name":"stdout","text":"Cost: 0.1743370811393732\nCost: 0.17384571655293027\nCost: 0.17340296260379856\nCost: 0.173002722513431\nCost: 0.1726398489840439\nCost: 0.17230996675823038\nCost: 0.1720093336971141\nCost: 0.171734730914717\nCost: 0.17148337508444264\nCost: 0.17125284784458333\n","output_type":"stream"}],"execution_count":80},{"cell_type":"code","source":"for epoch in range(10000):\n    l = grad_desc(l[0], l[1], l[2], l[3], 0.1)\n    if epoch % 1000 == 0:\n        cost_func(l[0], l[1], l[2], l[3])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T07:54:38.049406Z","iopub.execute_input":"2025-06-26T07:54:38.049663Z","iopub.status.idle":"2025-06-26T07:56:25.331580Z","shell.execute_reply.started":"2025-06-26T07:54:38.049643Z","shell.execute_reply":"2025-06-26T07:56:25.330842Z"}},"outputs":[{"name":"stdout","text":"Cost: 0.1710410385198842\nCost: 0.1696344902054188\nCost: 0.16894828900740883\nCost: 0.1685872641163332\nCost: 0.16838804626160359\nCost: 0.16827452152820474\nCost: 0.16820834670754967\nCost: 0.16816913351374674\nCost: 0.16814561240413764\nCost: 0.16813137407880313\n","output_type":"stream"}],"execution_count":81},{"cell_type":"markdown","source":"* *Below, we get weights and bias for our model.*","metadata":{}},{"cell_type":"code","source":"w1=l[0]\nw2=l[1]\nw3=l[2]\nb=l[3]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T09:33:23.010244Z","iopub.execute_input":"2025-06-26T09:33:23.010524Z","iopub.status.idle":"2025-06-26T09:33:23.014788Z","shell.execute_reply.started":"2025-06-26T09:33:23.010506Z","shell.execute_reply":"2025-06-26T09:33:23.013855Z"}},"outputs":[],"execution_count":113},{"cell_type":"markdown","source":"* *Now our model comes in action and predicts values from dataset that it was trained with.*\n* *Here, y_hat is output of sigmoid function i.e if probability is greater than 0.5 then yes chances against Magnus Carlson are very good.*","metadata":{}},{"cell_type":"code","source":"pred = []\nfor i in range(200):\n    z = (\n        w1 * df.loc[i, \"No. of GMs Beaten\"]\n        + w2 * df.loc[i, \"Elo_Norm\"]\n        + w3 * df.loc[i, \"Avg Opponent Rating (Last 50 Games)_Norm\"]\n        + b\n    )\n    y_hat = 1 / (1 + m.exp(-z))\n    pred.append(1 if y_hat >= 0.5 else 0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T08:35:54.411423Z","iopub.execute_input":"2025-06-26T08:35:54.411742Z","iopub.status.idle":"2025-06-26T08:35:54.422314Z","shell.execute_reply.started":"2025-06-26T08:35:54.411695Z","shell.execute_reply":"2025-06-26T08:35:54.421214Z"}},"outputs":[],"execution_count":90},{"cell_type":"markdown","source":"* *This is the use case of scikit-learn library we imported. This confusion Matrix.*\n* *Now if you have never seen this then no need to be confused. The 160 and 22 blocks are True positive and False negative values from our model i.e the no. of correct 1s and 0s our model predicted. Similarly, the other two blocks are incorrect 1s and 0s our model predicted.*\n* *As we see the model has gotten total 182 outcomes right out of 200 predictions so accuracy comes out to be 182/200x100 = 91%, which works for this example. Higher accuracy may be achieved through furthur gradient descent steps.*","metadata":{}},{"cell_type":"code","source":"cm = confusion_matrix(df[\"Chance to Beat Magnus?\"], pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T08:38:52.059304Z","iopub.execute_input":"2025-06-26T08:38:52.060151Z","iopub.status.idle":"2025-06-26T08:38:52.384851Z","shell.execute_reply.started":"2025-06-26T08:38:52.060120Z","shell.execute_reply":"2025-06-26T08:38:52.383763Z"}},"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7d9d573221d0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":93},{"cell_type":"markdown","source":"* *Here you can also try asking our model if you can beat Magnus.*\n* *However as the data fed is synthetic and not actual readings from domain experts, the dataset might be a little imbalanced resulting in some not so practical readings.*\n* *I've set thershold for high chance to be 70% as it's decent enough to beat Magnus Carlson and mid chance 50% to be called his level.*","metadata":{}},{"cell_type":"markdown","source":"* **","metadata":{}},{"cell_type":"code","source":"c1=int(input(\"Enter your Elo Rating :\"))\nc2=int(input(\"Enter GMs you have beaten :\"))\nc3=int(input(\"Average opponents rating in your last 50 games? :\"))\nX1 = (c2 - mean_C) / std_C\nX2 = (c1 - mean_B) / std_B\nX3 = (c3 - mean_D) / std_D\nmodel_z = w1*X1 + w2*X2 + w3*X3 + b\nmodel_pred = 1 / (1 + m.exp(-model_z))\nif model_pred >= 0.7 :\n    print(\"You are better than Magnus Carlson ['o'] ! \")\n    print(f\"You are the best player in modern era Chess, your probability is {model_pred*100}% of winning\")\nelif (model_pred <0.7) and (model_pred >=0.5) :\n    print(f\"You have {model_pred*100}% probability to beat Magnus Carlson, You are at his level\")\nelse:\n    print(f\" {model_pred*100}% chance. You are not at that level yet, keep practicing :) ! \")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T11:42:26.565407Z","iopub.execute_input":"2025-06-26T11:42:26.565743Z","iopub.status.idle":"2025-06-26T11:42:34.744026Z","shell.execute_reply.started":"2025-06-26T11:42:26.565719Z","shell.execute_reply":"2025-06-26T11:42:34.743150Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"Enter your Elo Rating : 2700\nEnter GMs you have beaten : 600\nAverage opponents rating in your last 50 games? : 2560\n"},{"name":"stdout","text":"You might have a shot with chance 54.86674154904557% \n","output_type":"stream"}],"execution_count":149},{"cell_type":"markdown","source":"* *Also, there's a visual representation of where you stand against him in form of bar graph from above test.*","metadata":{}},{"cell_type":"code","source":"your_chance = model_pred\nrequired_chance = 0.7\nlabels = [\"your Level\", \"Magnus's Level\"]\nvalues = [your_chance, required_chance]\n\nplt.bar(labels, values, color=[\"blue\", \"red\"])\nplt.ylim(0, 1)\nplt.ylabel(\"Probability to Beat Magnus\")\nplt.title(\"your Level vs Required Level\")\nplt.axhline(0.5, color='gray', linestyle='--', label='Above this, you might have a chance')\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T11:42:47.319260Z","iopub.execute_input":"2025-06-26T11:42:47.319532Z","iopub.status.idle":"2025-06-26T11:42:47.469686Z","shell.execute_reply.started":"2025-06-26T11:42:47.319513Z","shell.execute_reply":"2025-06-26T11:42:47.468936Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":150},{"cell_type":"markdown","source":"*Thanks for exploring this notebook! I hope you found it insightful and engaging.*\n\n*feel free to connect or share feedback!*","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}